<?php

/**
 * Company: Yee Technologies Pvt. Ltd. < www.yeetechnologies.com >
 * Author : Praveen Shivhare < praveen.tuffgeekers@gmail.com >
 */
 
/**
 * This is the model base class for the table "{{user_location_group}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UserLocationGroup".
 *
 * Columns in table "{{user_location_group}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $group_id
 * @property string $duration
 * @property integer $duration_type 
 * @property integer $state_id
 * @property integer $type_id
 * @property string $create_time
 *
 */
abstract class BaseUserLocationGroup extends GxActiveRecord {
	
	const TYPE_FRIEND_LIST_TYPE = 0;
	const TYPE_GROUP_TYPE = 1;
	const STATE_ACTIVE = 0;
	const STATE_INACTIVE = 1;
	const DURATION_TYPE_HOUR = 0;
	const DURATION_TYPE_MINUTES = 1;
	const DURATION_TYPE_SECONDS = 2;
	
	public static function getStatusOptions($id = null)
	{
		$list = array("Draft","Published","Archive");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}	
	public static function getDurationTypeOptions($id = null)
	{
		$list = array("Hours","Minutes","Seconds");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}
	public static function getTypeOptions($id = null)
	{
		$list = array("TYPE1","TYPE2","TYPE3");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}
 	public function beforeValidate()
	{
		if($this->isNewRecord)
		{
			if ( !isset( $this->user_id )) $this->user_id = Yii::app()->user->id;			
		if ( !isset( $this->create_time )) $this->create_time = new CDbExpression('NOW()');
		}else{
				}
		return parent::beforeValidate();
	}

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{user_location_group}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'UserLocationGroup|UserLocationGroups', $n);
	}

	public static function representingColumn() {
		return 'duration';
	}

	public function rules() {
		return array(
			array('user_id, group_id, duration,duration_type', 'required'),
			array('user_id, group_id,duration_type, state_id, type_id', 'numerical', 'integerOnly'=>true),
			array('duration', 'length', 'max'=>32),
			array('create_time', 'safe'),
			array('state_id, type_id, duration_type,create_time', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, user_id, group_id, duration,duration_type, state_id, type_id, create_time', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => Yii::t('app', 'User'),
			'group_id' => Yii::t('app', 'Group'),
			'duration' => Yii::t('app', 'Duration'),
			'duration_type' => Yii::t('app', 'Type'),
			'state_id' => Yii::t('app', 'State'),
			'type_id' => Yii::t('app', 'Type'),
			'create_time' => Yii::t('app', 'Create Time'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('group_id', $this->group_id);
		$criteria->compare('duration', $this->duration, true);
		$criteria->compare('duration_type', $this->duration_type);
		$criteria->compare('state_id', $this->state_id);
		$criteria->compare('type_id', $this->type_id);
		$criteria->compare('create_time', $this->create_time, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}